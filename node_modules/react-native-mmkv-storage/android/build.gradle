import groovy.json.JsonSlurper

buildscript {

  repositories {
    google()
    mavenCentral()

    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:4.2.1'
  }
}

apply plugin: 'com.android.library'

def getExtOrDefault(name, defaultValue) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : defaultValue
}

def found = false
def reactNativeDir = null
def androidSourcesName = 'React Native sources'
def parentDir = rootProject.projectDir

if (rootProject.ext.has('reactNativeAndroidRoot')) {
  reactNativeDir = rootProject.ext.get('reactNativeAndroidRoot')
} else {
  reactNativeDir = new File(
          projectDir,
          '/../../../node_modules/react-native/android'
  )
}
if (reactNativeDir.exists()) {
  found = true
} else {
  1.upto(5, {
    if (found) return true
    parentDir = reactNativeDir.parentFile

    reactNativeDir = new File(
            parentDir,
            'node_modules/react-native/android'
    )

    if (reactNativeDir.exists()) {
      found = true
    }
  })
}

def reactNative = reactNativeDir.absolutePath;
def reactNativeManifest = file("$reactNative/../package.json")
def reactNativeManifestAsJson = new JsonSlurper().parseText(reactNativeManifest.text)
def reactNativeVersion = reactNativeManifestAsJson.version as String
def (major, minor, patch) = reactNativeVersion.tokenize('.')
def rnMinorVersion = Integer.parseInt(minor)

android {
  compileSdkVersion getExtOrDefault('compileSdkVersion', 28)

  defaultConfig {
    minSdkVersion getExtOrDefault('minSdkVersion', 21)
    targetSdkVersion getExtOrDefault('targetSdkVersion', 28)
    //ndkVersion "21.1.6352462"
    
    externalNativeBuild {
      cmake {
        cppFlags "-fexceptions", "-frtti", "-std=c++1y", "-DONANDROID"
        abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        arguments '-DANDROID_STL=c++_shared', "-DNODE_MODULES_DIR=${reactNativeDir.parentFile.parentFile.toString()}", "-DRN_VERSION=${rnMinorVersion}"
      }
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  lintOptions{
    abortOnError false
    disable 'GradleCompatible'
  }

  externalNativeBuild {
     cmake {
          path "./src/main/rnmmkv/CMakeLists.txt"
      }
  }

  packagingOptions {
    excludes = ["**/libc++_shared.so","**/libjsi.so","**/libreactnativejni.so", "META-INF/MANIFEST.MF"]
  }
}

repositories {
  mavenCentral()
  mavenLocal()
  google()  

  if (reactNativeDir.exists()) {
    maven {
      url reactNativeDir.toString()
      name androidSourcesName
    }
    logger.info(":${project.name}:reactNativeAndroidRoot ${reactNativeDir.canonicalPath}")
  }

  if (!found) {
    throw new GradleException(
            "${project.name}: unable to locate React Native android sources. " +
                    "Ensure you have you installed React Native as a dependency in your project and try again."
    )
  }
 
}

dependencies {
  //noinspection GradleDynamicVersion
  implementation 'com.facebook.react:react-native:+'
  implementation "androidx.security:security-crypto:1.1.0-alpha03"
  implementation 'com.google.code.gson:gson:2.8.6'
  def buildType = "debug"
    tasks.all({ task ->
        if (task.name == "buildCMakeRelease") {
            buildType = "release"
        }
    })
    def rnAarMatcher = "**/react-native/**/*${buildType}.aar"
    if (rnMinorVersion < 69) {
        rnAarMatcher = "**/**/*.aar"
    }

  def rnAAR = fileTree("$reactNative").matching({ it.include rnAarMatcher }).singleFile
  files(rnAAR).each {
      def file = it.absoluteFile
      def aarFolder = new File("$buildDir/../$file.name");
      if (aarFolder.exists()) return;
      copy {
        from zipTree(file)
        into "$buildDir/../$file.name"
        include "jni/**/*"
      }
    }
}